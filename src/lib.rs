#![doc = include_str!("../README.md")]

use std::error::Error;

mod ir;
mod phones;
mod tokens;
mod rules;
mod applier;
mod matcher;
mod sub_string;
mod escaped_strings;
mod executor;
mod keywords;
mod io_macros;

pub use crate::{
    executor::{
        LineByLineExecuter,
        appliable_rules::{
            build_rules,
            AppliableRules,
        },
        runtime::{
            Runtime,
            LineApplicationLimit,
            LogRuntime,
        },
        getter::IoGetter,
    },
};

use io_macros::{
    await_io,
    io_fn,
};

#[cfg(test)]
pub(crate) mod tests;

#[cfg(feature = "docs")]
/// Returns the content of the README markdown file pertaining to writing sound change rules
#[must_use]
pub const fn docs() -> &'static str {
    include_str!("../docs/writing_rules.md")
}

/// A type of error
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum ScaErrorType {
    /// Error occurred when fetching input
    Input,
    /// Error occurred when logging output
    Output,
    /// Error occurred when parsing rules
    Parse,
    /// Error occurred when applying changes
    Application,
}

/// An error generated by the building or application of sound change rules
/// or by IO fetched during either process
#[cfg_attr(test, derive(PartialEq))]
#[derive(Debug)]
pub struct ScaError {
    err: String,
    line: String,
    line_num: usize,
    error_type: ScaErrorType, 
}

impl Error for ScaError {}

impl ScaError {
    /// Returns the number of the line on which the error occured
    #[must_use]
    #[inline]
    pub fn error_message(&self) -> &str {
        &self.err
    }

    /// Returns the number of the line on which the error occured
    #[must_use]
    #[inline]
    pub const fn line_number(&self) -> usize {
        self.line_num
    }

    /// Returns the number of the line on which the error occured
    #[must_use]
    #[inline]
    pub fn line(&self) -> &str {
        &self.line
    }

    /// Returns the type of error
    #[must_use]
    #[inline]
    pub const fn error_type(&self) -> ScaErrorType {
        self.error_type
    }

    /// Builds a new `ScaError` from any error,
    /// with the line and line number it occurred on
    fn from_error<E: Error + ?Sized>(e: &E, error_type: ScaErrorType, line: &str, line_num: usize) -> Self {
        Self {
            err: e.to_string(),
            line: line.to_string(),
            line_num,
            error_type,
        }
    }
}

impl std::fmt::Display for ScaError {
    #[inline]
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self.error_type {
            ScaErrorType::Input => write!(f, "Input")?,
            ScaErrorType::Output => write!(f, "Output")?,
            ScaErrorType::Parse => write!(f, "Syntax")?,
            ScaErrorType::Application => write!(f, "Application")?,
        }
        writeln!(f, " Error: {}", self.err)?;
        write!(f, "Line {}: {}", self.line_num, self.line)
    }
}